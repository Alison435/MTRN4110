//Part 5 
//Draw maze in serial monitor

#define ROWS_wall 2
#define COLS_wall 3

bool closedMaze = true; //is the maze closed?

  // vertical walls array
  bool verticalWalls[ROWS_wall][COLS_wall + 1] = { {1,0,0,1},               //verticalWalls[2][4]
                                                   {1,0,1,1}};
                                                       
  // horizontal walls array                                                 
  bool horizontalWalls[ROWS_wall + 1][COLS_wall]  = { {1,1,1},              //horizontalWalls[3][3]
                                                      {0,1,0},
                                                      {1,1,1}};
void setup() 
{
  Serial.begin(9600);

  for (int i = 0; i < (2 * ROWS_wall + 1); i++)
  {
    for (int j = 0; j < (2 * COLS_wall + 1); j++)
    {
      //Print Horizontal Walls
      if (i % 2 == 0 && j % 2 == 1) //NOTE 1 % 2 equals 1 (modulo)
      {
        if (horizontalWalls[i / 2][j / 2] == true)
        {
          Serial.print(" ---"); //offset horizontal wall from start
        }
        else
        {
          Serial.print("    ");
        }
      }

      //Print Vertical Walls
      if (i % 2 == 1 && j % 2 == 0)
      {
        
        //Serial.println(i); //i = {1,3} = valid rows
        //delay(15);
        //Serial.print(j); //j = {0,2,4,6} = valid col
        //delay(15);

        //when mapping valid map index to verticalWalls matrix (binary)
        //col val = always / 2
        //row val = 1 -> 0 or 3 -> 1     

          //if closed maze, encode all outer boundaries as walls
          if (closedMaze)
          {
            if ( j == 0)
            {            
               Serial.print("|   ");
               //Serial.print(j);
               //delay(50);
               //Serial.print(i);
               //delay(50);
            }
            else if ( j == 2*COLS_wall )
            {            
               Serial.print("|   ");
               //Serial.print(j);
               //delay(50);
               //Serial.print(i);
               //delay(50);
            }
            else if ( verticalWalls[j/2][i - 2] == true && (i > ROWS_wall)) // when row is 3
            {
              Serial.print("|   ");
              //Serial.print(j);
              //delay(50);
              //Serial.print(i);
              //delay(50);
              //Serial1.print("|");
            }           
            else
              Serial.print("    "); 
              continue;
            }            
          }        
    }
    Serial.print("\n");
  }
  
}
 
void loop() 
{
  
}
